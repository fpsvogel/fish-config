# GIT

# Tip: VS Code keybinding to insert current filename in terminal.
# Add to keybindings.json, via the command "Preferences: Open Keyboard Shortcuts (JSON)".
# {
#   "key": "cmd+shift+b",
#   "command": "workbench.action.terminal.sendSequence",
#   "args": { "text": " ${relativeFile}" },
#   "when": "terminalFocus"
# },

function git_current_branch
  git symbolic-ref --short HEAD
end

# Catch-all for "master" or  "main"
function main_branch
  if git cat-file -e refs/heads/master 2>/dev/null
    echo "master"
  else if git cat-file -e refs/heads/main 2>/dev/null
    echo "main"
  end
end

alias ga='git add'
alias gap='git add --patch'

# Add all except the files given in the arguments
function gax
  set args
  for file in $argv
    set args $args ":!$file"
  end

  if test (basename (pwd)) = "dot-com"
    git add -- . $args ':!.env' ':!Gemfile' ':!Gemfile.lock'
  else
    git add -- . $args
  end
end

alias gaxs='gax db/schema.rb'

alias gb='git branch'
alias gbc='git_current_branch | pbcopy'

# Delete current branch locally
function gbd
  set branch (git_current_branch)
  git switch (main_branch)
  git branch -D $branch
end

# Delete all local branches that no longer exist on remote
function gbda
  git fetch -p
  for branch in (git for-each-ref --format "%(refname) %(upstream:track)" refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}')
      git branch -D $branch
  end
end

alias gc='git clone'
alias gco='git checkout'
alias gcp='git cherry-pick'

alias cma='git add .; git commit -m'

# Commit staged files, or else all except .env
function cm
  set staged_files (git status -s | grep "^[MTADRCU]")

  if test -n "$staged_files"
    git commit --message $argv
  else
    if test (basename (pwd)) = "dot-com"
      git add -- . ':!.env' ':!Gemfile' ':!Gemfile.lock'
    else
      git add .
    end
    git commit --message $argv
  end
end

alias caa='git add .; git commit --amend --no-edit'

# Amend commit with staged files, or else all except .env
function ca
  if test (count $argv) -gt 0
    git add $argv
  end

  set staged_files (git status -s | grep "^[MTADRCU]")

  if test -n "$staged_files"
    git commit --amend --no-edit
  else
    if test (basename (pwd)) = "dot-com"
      git add -- . ':!.env' ':!Gemfile' ':!Gemfile.lock'
    else
      git add .
    end
    git commit --amend --no-edit
  end
end

alias cam='git commit  --allow-empty --amend -m'
alias ce='git commit --allow-empty -m "Empty commit to trigger CI"'

function gd
  set first_commit 1
  set second_commit 0

  if test (count $argv) -ge 1
    set first_commit $argv[1]
  end

  if test (count $argv) -ge 2
    set second_commit $argv[2]
  end

  git diff HEAD~$first_commit..HEAD~$second_commit
end

alias gds='git add .; git diff --shortstat HEAD; git reset >/dev/null'
alias gl='git log --pretty=format:"%C(yellow)%h %C(cyan)%ad %Cgreen%an %Creset%s%C(brightred)%d" --date=short --graph'

function gls
  gl --grep="$argv" -i
end

# show diffs
function glsd
  gl --grep="$argv" -i -p
end

alias gp='git push'
alias gpf='git push --force-with-lease'
alias gpff='git push --force'

function gpl
  set gemfile_changes (git status --porcelain Gemfile Gemfile.lock 2>/dev/null)
  if test (basename (pwd)) = "dot-com" -a -n "$gemfile_changes"
    git stash -- .env Gemfile Gemfile.lock
    git pull
    git stash pop
  else
    git pull
  end
end

alias pr='echo "https://github.com/kin/dot-com/compare/(git_current_branch)" | pbcopy'

alias grm='gw (main_branch); git pull; gw -; git rebase (main_branch)'
alias gri='git rebase -i'

function gr
  # Interactive rebase last n commits
  if test (count $argv) -gt 0
    git rebase -i "HEAD~$argv"
  else
    # Interactive rebase for main or feature branch
    if test (git_current_branch) = (main_branch)
      set total_commits (git rev-list --count HEAD)

      if test $total_commits -le 10
        git rebase -i --root
      else
        git rebase -i "HEAD~10"
      end
    else
      set total_commits (git rev-list --count HEAD --not (main_branch))
      git rebase -i "HEAD~$total_commits"
    end
  end
end

alias grc='git -c core.editor=true rebase --continue'
alias gra='git rebase --abort'
alias grl='git reflog'
alias grt='git reset'
alias grh='git reset HEAD~'
alias grha='git reset --hard'
alias grhaa='git clean -fd'
alias gro='git restore'
alias gros='git restore db/schema.rb db/data_schema.rb'
alias grom='git restore --source (main_branch)'
alias grosm='git restore --source (main_branch) db/schema.rb db/data_schema.rb'
alias grv='git revert --no-edit'

function gst
  if test -f .env
    git add .env
    git stash --keep-index --include-untracked
    git reset .env
  else
    git stash --keep-index --include-untracked
  end
end

# stash temporary changes
function gstt
  git stash -- .env Gemfile Gemfile.lock
end

function gsp
  if test -f .env
    git add .env
    git stash pop
    git reset .env
  else
    git stash pop
  end
end

alias gsl='git stash list'
alias gss='git stash show'
alias gssp='git stash show -p'
alias gs='git status -u'

function gw
  set branch_to_switch ""

  if test "$argv[1]" = "-"
    set branch_to_switch "-"
  else if test "$argv[1]" = "main"
    set branch_to_switch "main"
  else
    # First try to find an exact local branch match (excluding remotes)
    set exact_local_branch (git branch -a | grep -v remotes | grep -i $argv[1] | head -n 1 | xargs)
    if test -n "$exact_local_branch"
      set branch_to_switch $exact_local_branch
    # If it contains a slash, treat it as a remote branch reference
    else if string match -q -r "/" $argv[1]
      set branch_to_switch $argv[1]
    else
      # Search all branches (including remotes) and strip the remote prefix
      set branch (git branch -a | grep -i $argv[1] | head -n 1 | xargs)
      set branch_to_switch (string replace "remotes/origin/" "" $branch)
    end
  end

  set gemfile_changes (git status --porcelain Gemfile Gemfile.lock 2>/dev/null)
  if test (basename (pwd)) = "dot-com" -a -n "$gemfile_changes"
    git stash -- .env Gemfile Gemfile.lock
    git switch $branch_to_switch
    git stash pop
  else
    git switch $branch_to_switch
  end
end

alias gt="git tag"
alias gw-='gw -'
alias gwc='git switch --create'
alias gwm='gw (main_branch)'

# MISC.
alias cl='clear'
alias c='code'
alias d='cd ~/dev'

# DOCKER, ETC.
alias ra='docker compose up'
alias rr='bin/start-dev-workers'
alias rv='bin/vite dev'

# POSTGRESQL
alias pg='psql -U postgres'

# OTHER DB
alias maria='mysql.server start'

# RUBY
alias bt='bin/bridgetown'
alias bs='bin/bridgetown start'

# RAKE
alias r='rake'
alias rt='rake test'

# YARD
alias rd='bundle exec yard doctest | grep -v "^\[warn\]" | grep -v "^\s" | awk \'{if (NF || p) print; if (NF) p=1}\'' #' hides warnings

# RAILS
alias ss='spring stop'
alias rs='rails s'
alias rsp='PROFILE=true rails s'
alias rc='rails c'
alias rcv='rails c --sandbox'
alias rmg='rails db:migrate RAILS_ENV=development'
alias rmp='rails db:test:prepare'
alias rmgp='rails db:test:prepare'
alias rmt='rails db:migrate RAILS_ENV=test'
alias rmgt='rails db:migrate RAILS_ENV=test'

function rmr
  rails db:rollback STEP=$argv[1]
end

function rmrt
  rails db:rollback RAILS_ENV=test STEP=$argv[1]
end

function rmd
  rails db:migrate:down VERSION=$argv[1]
end

function rmdt
  rails db:migrate:down RAILS_ENV=test VERSION=$argv[1]
end

function rmu
  rails db:migrate:up VERSION=$argv[1]
end

function rmut
  rails db:migrate:up RAILS_ENV=test VERSION=$argv[1]
end

alias rlog='tail -f log/development.log'
alias b='bundle'
alias be='bundle exec'

# EXERCISM
function xd
  exercism download --track=(basename (pwd)) --exercise=$argv[1]

  switch (basename (pwd))
    case typescript
      cd (ls -td -- */ | head -n 1)
      corepack yarn install
      cd -
  end
end

function xt
  switch (basename (pwd))
    case haskell
      cd (ls -td -- */ | head -n 1)
      stack test
      cd -
    case ruby
      ruby (ls -td -- */ | head -n 1)*_test.rb
    case javascript
      cd (ls -td -- */ | head -n 1)
      pnpm run test
      cd -
    case typescript
      cd (ls -td -- */ | head -n 1)
      corepack yarn test
      cd -
    case roc
      roc test (ls -td -- */ | head -n 1)*-test.roc
  end
end

function xs
  switch (basename (pwd))
    case haskell
      exercism submit (find (ls -td -- */ | head -n 1 | cut -d"/" -f1) -wholename "**/src/*.hs") (ls -td -- */ | head -n 1)package.yaml
    case ruby
      exercism submit (find (ls -td -- */ | head -n 1 | cut -d"/" -f1) -name "*.rb" ! -name "*_test.rb")
    case javascript
      exercism submit (find (ls -td -- */ | head -n 1 | cut -d"/" -f1) -name "*.js" ! -name "*.spec.js" ! -name "*.config.js" ! -path "*/node_modules/*")
    case typescript
      exercism submit (find (ls -td -- */ | head -n 1 | cut -d"/" -f1) -name "*.ts" ! -name "*.test.ts" ! -name "*.config.ts" ! -path "*/node_modules/*")
    case roc
      exercism submit (find (ls -td -- */ | head -n 1 | cut -d"/" -f1) -name "*.roc" ! -name "*-test.roc")
  end
end

# DRAGONRUBY GAME TOOLKIT
alias dr='./dragonruby'

# HASKELL
alias cr='cabal run'
alias cv='cabal repl --with-ghc=doctest'
# TODO avoid running cabal test first
alias ct='cabal test >/dev/null; cabal run test:tests'
function cc
  cabal-prettify --this --expose
  for file in *.cabal
    sed -i '/other-modules:/ s/ Spec$//' $file
  end
end

# PNPM
alias ni='pnpm install'
alias nt='pnpm test'
alias pnpx='pnpm dlx'

# Kin
alias kg="toggle-kin-gem administered_policies && toggle-kin-gem kin_portal"
